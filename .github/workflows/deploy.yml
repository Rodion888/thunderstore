name: Deploy Thunder Store

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Connect to server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/thunder-store

            echo "Updating repository"
            git pull origin main

            echo "Creating logs directory"
            mkdir -p /var/www/thunder-store/logs
            chmod 755 /var/www/thunder-store/logs

            echo "Setting up product storage"
            mkdir -p /var/www/thunder-store/uploads/products
            chmod 755 /var/www/thunder-store/uploads
            chmod 755 /var/www/thunder-store/uploads/products
            mkdir -p /var/www/thunder-store/client/src/assets/static

            echo "Configuring PostgreSQL for remote connections"
            PG_CONF=$(find /etc/postgresql -name postgresql.conf | head -n 1)
            PG_HBA=$(find /etc/postgresql -name pg_hba.conf | head -n 1)
            
            sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" $PG_CONF
            echo "host    all             all             172.16.0.0/12            md5" >> $PG_HBA
            echo "host    all             all             127.0.0.1/32            md5" >> $PG_HBA
            
            systemctl restart postgresql

            echo "Creating .env file for server"
            echo "SERVER_URL=${{ secrets.SERVER_URL }}" > server/.env
            echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> server/.env
            
            echo "PGUSER=${{ secrets.PG_USER }}" >> server/.env
            echo "PGHOST=localhost" >> server/.env
            echo "PGDATABASE=${{ secrets.PG_DATABASE }}" >> server/.env
            echo "PGPASSWORD=${{ secrets.PG_PASSWORD }}" >> server/.env
            echo "PGPORT=${{ secrets.PG_PORT }}" >> server/.env
            
            echo "CRYPTO_CLOUD_API_KEY=${{ secrets.CRYPTO_CLOUD_API_KEY }}" >> server/.env
            echo "CRYPTO_CLOUD_SHOP_ID=${{ secrets.CRYPTO_CLOUD_SHOP_ID }}" >> server/.env
            echo "APP_URL=${{ secrets.APP_URL }}" >> server/.env
            
            echo "LOG_LEVEL=info" >> server/.env
            echo "TELEGRAM_ENABLED=true" >> server/.env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> server/.env
            echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> server/.env
            
            echo "SSL_CERTS_PATH=/etc/letsencrypt" > .env
            echo "DOMAIN=thunder-store.ru" >> .env
            echo "NODE_ENV=production" >> .env

            echo "Updating Angular env.js"
            echo "window.env = { NG_APP_API_URL: '${{ secrets.NG_APP_API_URL }}', NG_APP_WS_URL: '${{ secrets.NG_APP_WS_URL }}' };" > client/dist/assets/env.js

            echo "Rebuilding and restarting containers"
            # Build and start containers
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d

            echo "Deployment completed successfully!"