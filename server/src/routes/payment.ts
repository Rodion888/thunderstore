import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { PaymentLogger } from '../utils/payment-logger.js';

import fetch from 'node-fetch';

export default async function paymentRoutes(fastify: FastifyInstance): Promise<void> {
  const logger = new PaymentLogger(fastify);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
  fastify.post('/payment/create', async (request: FastifyRequest<{
    Body: { orderId: number; amount: number; email: string; }
  }>, reply: FastifyReply) => {
    try {
      const { orderId, amount, email } = request.body;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      logger.logPaymentCreation(orderId, amount, email);
      
      const API_KEY = process.env.CRYPTO_CLOUD_API_KEY;
      const SHOP_ID = process.env.CRYPTO_CLOUD_SHOP_ID;
      const baseUrl = process.env.APP_URL;
      
      if (!API_KEY || !SHOP_ID || !baseUrl) {
        fastify.log.error('Missing payment configuration. Check environment variables.');
        logger.logPaymentCreationError(orderId, 'Missing payment configuration');
        return reply.status(500).send({ error: 'Payment service misconfigured' });
      }

      const response = await fetch('https://api.cryptocloud.plus/v1/invoice/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Token ${API_KEY}`,
        },
        body: JSON.stringify({
          shop_id: SHOP_ID,
          amount: amount.toFixed(2),
          currency: 'USD',
          order_id: String(orderId),
          email: email,
          webhook_url: `${baseUrl}/payment/webhook`,
          success_url: `${baseUrl}/success?orderId=${orderId}`,
          fail_url: `${baseUrl}/checkout`,
        }),
      });

      const result = await response.json();

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      fastify.log.info(`CryptoCloud API response: ${JSON.stringify(result)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç API - –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      if (result?.data?.url) {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API (v1)
        logger.logPaymentCreated(orderId, result.data.url);
        return reply.send({ paymentUrl: result.data.url });
      } else if (result?.payurl) {
        // –°—Ä–µ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç API (v2)
        logger.logPaymentCreated(orderId, result.payurl);
        return reply.send({ paymentUrl: result.payurl });
      } else if (result?.pay_url) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API (v3)
        fastify.log.info(`Detected new API format with pay_url: ${result.pay_url}`);
        logger.logPaymentCreated(orderId, result.pay_url);
        return reply.send({ paymentUrl: result.pay_url });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ URL –ø–ª–∞—Ç–µ–∂–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      logger.logPaymentCreationError(orderId, result);
      return reply.status(500).send({ error: 'Failed to create invoice: No payment URL found', details: result });
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      logger.logPaymentCreationError(request.body?.orderId || 0, error);
      return reply.status(500).send({ error: 'Internal server error' });
    }
  });

  // Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
  fastify.post('/payment/webhook', async (request: FastifyRequest, reply: FastifyReply) => {
    try {
      const data = request.body as any;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
      logger.logWebhookReceived(data);

      if (data.status === 'paid') {
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        logger.logPaymentSuccess(data.order_id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          await fastify.pool.query(
            `UPDATE orders SET status = 'paid' WHERE id = $1`,
            [data.order_id]
          );
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
          if (fastify.telegramBot) {
            fastify.telegramBot.sendMessage(`üíµ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∞*\n\n–ó–∞–∫–∞–∑ ‚Ññ${data.order_id} –æ–ø–ª–∞—á–µ–Ω.\n–°—É–º–º–∞: ${data.amount} ${data.currency}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order ${data.order_id} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`);
          }
        } catch (dbError) {
          fastify.log.error(`Error updating order status: ${dbError}`);
        }
      }

      return reply.send({ status: 'ok' });
    } catch (error) {
      fastify.log.error('Error processing webhook:', error);
      return reply.status(500).send({ error: 'Internal server error' });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
  fastify.get('/health', async (request, reply) => {
    return reply.send({ status: 'ok' });
  });
}
