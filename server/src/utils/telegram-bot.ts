import { FastifyInstance } from 'fastify';
import fetch from 'node-fetch';
import { Pool } from 'pg';

export class TelegramBot {
  private fastify: FastifyInstance;
  private telegramEnabled: boolean;
  private telegramToken: string | undefined;
  private telegramChatId: string | undefined;
  private pool: Pool;
  
  constructor(fastify: FastifyInstance, pool: Pool) {
    this.fastify = fastify;
    this.pool = pool;
    
    this.telegramToken = process.env.TELEGRAM_BOT_TOKEN;
    this.telegramChatId = process.env.TELEGRAM_CHAT_ID;
    this.telegramEnabled = process.env.TELEGRAM_ENABLED === 'true' && !!this.telegramToken && !!this.telegramChatId;
    
    if (this.telegramEnabled) {
      this.fastify.log.info('Telegram bot enabled');
      this.setupWebhook();
    }
  }
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
  private async setupWebhook() {
    try {
      const baseUrl = process.env.APP_URL;
      if (!baseUrl) {
        this.fastify.log.error('APP_URL not set, cannot setup webhook');
        return;
      }
      
      const webhookUrl = `${baseUrl}/api/telegram/webhook`;
      const response = await fetch(`https://api.telegram.org/bot${this.telegramToken}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: webhookUrl })
      });
      
      const result = await response.json();
      
      if (result.ok) {
        this.fastify.log.info(`Telegram webhook set to ${webhookUrl}`);
      } else {
        this.fastify.log.error(`Failed to set Telegram webhook: ${result.description}`);
      }
    } catch (error) {
      this.fastify.log.error(`Error setting Telegram webhook: ${error}`);
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç –±–æ—Ç–∞
  public async handleCommand(text: string, chatId: string) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º
    if (chatId !== this.telegramChatId) {
      return this.sendMessage('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.', chatId);
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
    const parts = text.split(' ');
    const command = parts[0].toLowerCase();
    
    try {
      switch (command) {
        case '/start':
          return this.sendMessage('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ThunderStore.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/orders - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n/order [id] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n/products - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥', chatId);
        
        case '/help':
          return this.sendHelp(chatId);
        
        case '/orders':
          return this.getOrders(chatId);
        
        case '/order':
          if (parts.length < 2) return this.sendMessage('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: /order [id]', chatId);
          return this.getOrder(parseInt(parts[1]), chatId);
        
        case '/products':
          return this.getProducts(chatId);
        
        case '/product':
          if (parts.length < 2) return this.sendMessage('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: /product [id]', chatId);
          return this.getProduct(parseInt(parts[1]), chatId);
        
        case '/status':
          if (parts.length < 3) return this.sendMessage('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å: /status [id] [status]', chatId);
          return this.updateOrderStatus(parseInt(parts[1]), parts[2], chatId);
        
        case '/stats':
          return this.getStats(parts[1] || 'today', chatId);
        
        default:
          return this.sendMessage('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.', chatId);
      }
    } catch (error) {
      this.fastify.log.error(`Error handling command ${command}: ${error}`);
      return this.sendMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`, chatId);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
  private async getOrders(chatId: string) {
    try {
      const result = await this.pool.query(`
        SELECT o.id, o.status, o.total_price, o.created_at, u.email
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        ORDER BY o.created_at DESC
        LIMIT 10
      `);
      
      if (result.rows.length === 0) {
        return this.sendMessage('üìä –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', chatId);
      }
      
      let message = 'üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n';
      
      result.rows.forEach(order => {
        const date = new Date(order.created_at).toLocaleString('ru');
        const statusEmoji = this.getStatusEmoji(order.status);
        
        message += `üîπ *–ó–∞–∫–∞–∑ #${order.id}*\n`;
        message += `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        message += `üí∞ –°—É–º–º–∞: ${order.total_price} ‚ÇΩ\n`;
        message += `üìÖ –î–∞—Ç–∞: ${date}\n`;
        message += `‚úâÔ∏è Email: ${order.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
      });
      
      message += '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order [id]';
      
      return this.sendMessage(message, chatId);
    } catch (error) {
      this.fastify.log.error(`Error getting orders: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: ${error}`, chatId);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–∫–∞–∑–µ
  private async getOrder(orderId: number, chatId: string) {
    try {
      const orderResult = await this.pool.query(`
        SELECT o.id, o.status, o.total_price, o.created_at, o.shipping_address, u.email, u.phone
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        WHERE o.id = $1
      `, [orderId]);
      
      if (orderResult.rows.length === 0) {
        return this.sendMessage(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, chatId);
      }
      
      const order = orderResult.rows[0];
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
      const itemsResult = await this.pool.query(`
        SELECT oi.quantity, oi.price, oi.size, p.name, p.id as product_id
        FROM order_items oi
        JOIN products p ON oi.product_id = p.id
        WHERE oi.order_id = $1
      `, [orderId]);
      
      const date = new Date(order.created_at).toLocaleString('ru');
      const statusEmoji = this.getStatusEmoji(order.status);
      
      let message = `üõçÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #${order.id}*\n\n`;
      message += `${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${order.status}\n`;
      message += `üí∞ *–°—É–º–º–∞:* ${order.total_price} ‚ÇΩ\n`;
      message += `üìÖ *–î–∞—Ç–∞:* ${date}\n`;
      message += `‚úâÔ∏è *Email:* ${order.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `üè† *–ê–¥—Ä–µ—Å:* ${order.shipping_address || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
      
      message += `üì¶ *–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:*\n`;
      
      itemsResult.rows.forEach(item => {
        message += `‚ñ´Ô∏è ${item.name} (ID: ${item.product_id})\n`;
        message += `   –†–∞–∑–º–µ—Ä: ${item.size}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}, –¶–µ–Ω–∞: ${item.price} ‚ÇΩ\n`;
      });
      
      message += '\n*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º:*\n';
      message += '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /status ' + order.id + ' [new_status]\n';
      message += '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: pending, paid, shipped, delivered, cancelled';
      
      return this.sendMessage(message, chatId);
    } catch (error) {
      this.fastify.log.error(`Error getting order ${orderId}: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId}: ${error}`, chatId);
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  private async updateOrderStatus(orderId: number, newStatus: string, chatId: string) {
    const validStatuses = ['pending', 'paid', 'shipped', 'delivered', 'cancelled'];
    
    if (!validStatuses.includes(newStatus)) {
      return this.sendMessage(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: ${validStatuses.join(', ')}`, chatId);
    }
    
    try {
      const result = await this.pool.query(`
        UPDATE orders SET status = $1 WHERE id = $2 RETURNING id
      `, [newStatus, orderId]);
      
      if (result.rows.length === 0) {
        return this.sendMessage(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, chatId);
      }
      
      const statusEmoji = this.getStatusEmoji(newStatus);
      return this.sendMessage(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${statusEmoji} ${newStatus}`, chatId);
    } catch (error) {
      this.fastify.log.error(`Error updating order status ${orderId}: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}: ${error}`, chatId);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  private async getProducts(chatId: string) {
    try {
      const result = await this.pool.query(`
        SELECT id, name, price, array_to_string(categories, ', ') as categories
        FROM products
        ORDER BY id
        LIMIT 10
      `);
      
      if (result.rows.length === 0) {
        return this.sendMessage('üìä –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', chatId);
      }
      
      let message = 'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n';
      
      result.rows.forEach(product => {
        message += `üî∏ *${product.name}* (ID: ${product.id})\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ\n`;
        message += `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${product.categories || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n`;
      });
      
      message += '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /product [id]';
      
      return this.sendMessage(message, chatId);
    } catch (error) {
      this.fastify.log.error(`Error getting products: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${error}`, chatId);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
  private async getProduct(productId: number, chatId: string) {
    try {
      const result = await this.pool.query(`
        SELECT id, name, price, description, array_to_string(categories, ', ') as categories, stock
        FROM products
        WHERE id = $1
      `, [productId]);
      
      if (result.rows.length === 0) {
        return this.sendMessage(`‚ùå –¢–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, chatId);
      }
      
      const product = result.rows[0];
      
      let message = `üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ #${product.id}*\n\n`;
      message += `üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${product.name}\n`;
      message += `üí∞ *–¶–µ–Ω–∞:* ${product.price} ‚ÇΩ\n`;
      message += `üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* ${product.categories || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n`;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${(product.description || '').substring(0, 100)}${product.description && product.description.length > 100 ? '...' : ''}\n\n`;
      
      message += `üóÉÔ∏è *–ù–∞–ª–∏—á–∏–µ:*\n`;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –æ–±—ä–µ–∫—Ç stock –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const stock = product.stock ? product.stock : {};
      Object.entries(stock).forEach(([size, quantity]) => {
        message += `‚ñ´Ô∏è ${size}: ${quantity}\n`;
      });
      
      return this.sendMessage(message, chatId);
    } catch (error) {
      this.fastify.log.error(`Error getting product ${productId}: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ #${productId}: ${error}`, chatId);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  private async getStats(period: string, chatId: string) {
    try {
      let timeCondition = '';
      let periodName = '';
      
      switch (period.toLowerCase()) {
        case 'today':
          timeCondition = 'created_at >= CURRENT_DATE';
          periodName = '—Å–µ–≥–æ–¥–Ω—è';
          break;
        case 'yesterday':
          timeCondition = 'created_at >= CURRENT_DATE - INTERVAL \'1 day\' AND created_at < CURRENT_DATE';
          periodName = '–≤—á–µ—Ä–∞';
          break;
        case 'week':
          timeCondition = 'created_at >= CURRENT_DATE - INTERVAL \'7 days\'';
          periodName = '–∑–∞ –Ω–µ–¥–µ–ª—é';
          break;
        case 'month':
          timeCondition = 'created_at >= CURRENT_DATE - INTERVAL \'30 days\'';
          periodName = '–∑–∞ –º–µ—Å—è—Ü';
          break;
        default:
          timeCondition = 'created_at >= CURRENT_DATE';
          periodName = '—Å–µ–≥–æ–¥–Ω—è';
      }
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
      const orderStats = await this.pool.query(`
        SELECT 
          COUNT(*) as total_orders,
          COUNT(CASE WHEN status = 'paid' OR status = 'shipped' OR status = 'delivered' THEN 1 END) as completed_orders,
          COALESCE(SUM(CASE WHEN status = 'paid' OR status = 'shipped' OR status = 'delivered' THEN total_price ELSE 0 END), 0) as revenue
        FROM orders
        WHERE ${timeCondition}
      `);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusStats = await this.pool.query(`
        SELECT status, COUNT(*) as count
        FROM orders
        WHERE ${timeCondition}
        GROUP BY status
        ORDER BY count DESC
      `);
      
      const stats = orderStats.rows[0];
      
      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${periodName}*\n\n`;
      message += `üõí *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:* ${stats.total_orders}\n`;
      message += `‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* ${stats.completed_orders}\n`;
      message += `üí∞ *–í—ã—Ä—É—á–∫–∞:* ${stats.revenue} ‚ÇΩ\n\n`;
      
      if (statusStats.rows.length > 0) {
        message += `üìã *–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:*\n`;
        statusStats.rows.forEach(row => {
          const statusEmoji = this.getStatusEmoji(row.status);
          message += `${statusEmoji} ${row.status}: ${row.count}\n`;
        });
      }
      
      return this.sendMessage(message, chatId);
    } catch (error) {
      this.fastify.log.error(`Error getting stats for ${period}: ${error}`);
      return this.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`, chatId);
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
  private async sendHelp(chatId: string) {
    const message = `
üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*–ó–∞–∫–∞–∑—ã:*
/orders - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
/order [id] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
/status [id] [status] - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

*–¢–æ–≤–∞—Ä—ã:*
/products - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
/product [id] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
/stats today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
/stats month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü

*–ü—Ä–æ—á–µ–µ:*
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
`;
    
    return this.sendMessage(message, chatId);
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'pending': return '‚è≥';
      case 'paid': return 'üíµ';
      case 'shipped': return 'üöö';
      case 'delivered': return '‚úÖ';
      case 'cancelled': return '‚ùå';
      default: return '‚ùì';
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  public async sendMessage(message: string, chatId: string = this.telegramChatId!) {
    if (!this.telegramEnabled || !this.telegramToken) return;
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.telegramToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        })
      });
      
      const result = await response.json();
      
      if (!result.ok) {
        this.fastify.log.error(`Failed to send Telegram message: ${result.description}`);
      }
      
      return result;
    } catch (error) {
      this.fastify.log.error(`Error sending Telegram message: ${error}`);
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º PaymentLogger)
  public async sendPaymentNotification(message: string) {
    return this.sendMessage(message);
  }
} 